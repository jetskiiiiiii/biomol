import pytest
from biomol import basics

@pytest.mark.parametrize("input, expected_output", [
    ("AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC", {'A': 20, 'C': 12, 'G': 17, 'T':21}),
    ("GTACTTAACCGCAAAGGGATTAACAACACTGCGAATGATCAGCGCTCCCACAGGCCGACCTTCCGTGCACCCAGTCATTTGCTCCGCACTACAAACATGTCAGGACCACAAAAACGGGTAGTTTCCCAACGAATCGACAGCGAAGCGGGCTCGACGGCCTCCCGCACACAAAGCTACTCCGTATCTACTGCGCCCTGGGAGAACTATTCCGCAGAGTTAGCGCAGGCCAGTGTAGTTGCCCCATAATGTGCGTGTAGGGACGCAATCAACCCTGACAAGGCAGACATAGGCACGACTCGCGAGCCTGTCATTCAATAACGATGTTTTAAATTCGACTGGTTGCCTTCATTCCTTCACAGGTCTACTCTGCGATTACCACCCTGGTGACAAGTAGCCCGCCCATAGTATCGTCCCTATCTGCCTCCGACTGGATAAGCATACCTGGCGGCCCCTACCAGCGATGACCGAACCTCACTTTGTATAGATCTCACTCCGCGTCAACTAGATGCCTCCTGGTTAGCCCAGTACCCCAGTCTGAAGCCCATTTAATGGCCTCGTTGAGTCAGGCTCATCACTCCCACATTGGACGCATTGGATAGCAGTACGTTCTAACGCGCCCAGTTTATTAAAAATTGGCAGATGTACCAACACAGCTGCAAAAGTACCCCCTTATTCAGATTGAGATTTCTGGTTACACAGTAGGTGACAGGTAAAACGAAATCTCTCTTCGCGTTATCCGGACGTCGGAGCGTGACGCCATCTATAGAGGCTGCGAACTGCGCCATCAAGCGTTGGCAGTCCCTCTTTGGAGCCCTCAGGCATACTCGATCCATAAATCTATTATGGATCAGGACCAGGATACGAGCCTCCGGCCAGTGCCGGCATGAATGTGGTGAAGGTATGCGTCTGGTCATCTCACAACTCTAATGGTCGGGGGTGGTAGAAAGAGCGCCTG", {'A': 239, 'C': 276, 'G': 224, 'T':216})
])
def test_count_dna_nucleotides(input, expected_output):
    assert basics.count_dna_nucleotides(input) == expected_output
    
    
@pytest.mark.parametrize("input, expected_output", [
    ("GATGGAACTTGACTACGTAAATT", "GAUGGAACUUGACUACGUAAAUU"),
    ("TAGACCGCAAATGTAGCATGATACTACTTTGGCGCATAACACTCCGCTCCTAGCTGGCTTAGTCCTTATTCTTGTCAGGCTAGTGTGGATTATCTGCTCTGGCTGCAAAGCCGTCATCCAAGTTGCGCACGTTACCTACGGGTTTTCATAGCCACCTCACCATGAGTGACCCGTGGTGGCTGTTTTAACCGAAACAATCAGATGGTAGTTTCTCCAATGGTATGTACCTTAGCCTTGCAGATCACAAAGGCACTCGCTATCACATACGGACTTAAGAAACCTTACCCATCTCGGAGGAGTGATTCTTGGTCTGGGATATCGCAGAACATTCATAGGATTCCACCTCCCCCATAAATACAAATAAGGCCGATAGACAAGGAGATCTGTCGTAGGTGATATCACCCGAAGAGATGCTCGCATACATAGCGCTAATCTCAAGGATGACGAGGTCCCTGGAACCATATCCCACATGCCTGTCGAAGCTACGAGAATACCTTACAGCAAATATTAGACACCCAGCCGCCGACTAGTACGAGCATAGGGGTTTCGGCAACTCTCTGTTTACGAGATATTTAAGTTTCTTATTCTGCGTCGGCAGATCCGGGGCGAGACGAGTGCTTGCTCAGGGTCAAGAGGCATGAGATTATTCACCTAGGATTAGACGATACACAGAATGATTGACCATTACCCAACGCATTCTAATTAGAACCTGTGATACAGGTGCCAACAAGGGCATTAGGTGTGAGCCGGCCTCGCAGGCTCTACTTTTACCGGTATGCAGGCGAGAACCTAGCAGGCGATTAGCACGTATCGTGTAACCCTGGAGAGCCCCTAGTCCTGGTGGAAAAAACTTACACGGGGCCACTAGTAGAACTGTATTGATAGGTGACAGATGAACTTAGCTTGCAATGGCAGGCCGAAGTAGGTACCCTTCCCGTG",
     "UAGACCGCAAAUGUAGCAUGAUACUACUUUGGCGCAUAACACUCCGCUCCUAGCUGGCUUAGUCCUUAUUCUUGUCAGGCUAGUGUGGAUUAUCUGCUCUGGCUGCAAAGCCGUCAUCCAAGUUGCGCACGUUACCUACGGGUUUUCAUAGCCACCUCACCAUGAGUGACCCGUGGUGGCUGUUUUAACCGAAACAAUCAGAUGGUAGUUUCUCCAAUGGUAUGUACCUUAGCCUUGCAGAUCACAAAGGCACUCGCUAUCACAUACGGACUUAAGAAACCUUACCCAUCUCGGAGGAGUGAUUCUUGGUCUGGGAUAUCGCAGAACAUUCAUAGGAUUCCACCUCCCCCAUAAAUACAAAUAAGGCCGAUAGACAAGGAGAUCUGUCGUAGGUGAUAUCACCCGAAGAGAUGCUCGCAUACAUAGCGCUAAUCUCAAGGAUGACGAGGUCCCUGGAACCAUAUCCCACAUGCCUGUCGAAGCUACGAGAAUACCUUACAGCAAAUAUUAGACACCCAGCCGCCGACUAGUACGAGCAUAGGGGUUUCGGCAACUCUCUGUUUACGAGAUAUUUAAGUUUCUUAUUCUGCGUCGGCAGAUCCGGGGCGAGACGAGUGCUUGCUCAGGGUCAAGAGGCAUGAGAUUAUUCACCUAGGAUUAGACGAUACACAGAAUGAUUGACCAUUACCCAACGCAUUCUAAUUAGAACCUGUGAUACAGGUGCCAACAAGGGCAUUAGGUGUGAGCCGGCCUCGCAGGCUCUACUUUUACCGGUAUGCAGGCGAGAACCUAGCAGGCGAUUAGCACGUAUCGUGUAACCCUGGAGAGCCCCUAGUCCUGGUGGAAAAAACUUACACGGGGCCACUAGUAGAACUGUAUUGAUAGGUGACAGAUGAACUUAGCUUGCAAUGGCAGGCCGAAGUAGGUACCCUUCCCGUG")
])
def test_transcribe_dna_into_rna(input, expected_output):
    assert basics.transcribe_dna_into_rna(input) == expected_output
    
    
